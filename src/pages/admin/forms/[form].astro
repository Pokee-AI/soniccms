---
import { apiConfig } from "../../../db/routes";
import { getFieldDefinitions } from "../../../services/fields";
import AdminLayout from "../layouts/admin-layout.astro";
import FormComponent from "./form-component.astro";

const { form } = Astro.params;
const tableConfigRecord = apiConfig.find((t) => t.route === form);

// Get error message from URL params
const errorMessage = Astro.url.searchParams.get("error");

// const definitionObject = tableConfig.definition;

// // Convert the nested objects to an array
// const definitionArray = Object.values(definitionObject);

// const fields = Object.entries(tableConfig.fields);

// const formFields = definitionArray.map((field) => {
//   const key = field.config.name;
//   const fieldOverride = tableConfig.fields[key];
//   if (fieldOverride) {
//     return { key, type: fieldOverride };
//   } else {
//     return { key, type: "textField" };
//   }
// });
const tableConfig = getFieldDefinitions(tableConfigRecord);

if (Astro.request.method === "POST") {
  let success = false;
  let errorMessage = "";
  
  try {
    const formData = await Astro.request.formData();
    var data = {};
    formData.forEach((value, key) => {
      // Reflect.has in favor of: object.hasOwnProperty(key)
      if (!Reflect.has(data, key)) {
        data[key] = value;
        return;
      }
      if (!Array.isArray(data[key])) {
        data[key] = [data[key]];
      }
      data[key].push(value);
    });
    var json = JSON.stringify({data});

    //now post to our own post api
    const baseURl = Astro.request.url.split("/admin/")[0];
    const postUrl = `${baseURl}/api/v1/${tableConfigRecord.route}`;
    
    console.log("🔍🔍🔍 FORM DEBUG START 🔍🔍🔍");
    console.log("🔍 Form Debug - Post URL:", postUrl);
    console.log("🔍 Form Debug - Data being sent:", json);
    
    const session = Astro.cookies.get("session")?.value;
    const response = await fetch(postUrl, {
      method: "POST",
      body: json,
      headers: new Headers({ 
        Authorization: `Bearer ${session}`,
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      }),
    });
    
    console.log("🔍 Form Debug - Response status:", response.status);
    console.log("🔍 Form Debug - Response ok:", response.ok);
    console.log("🔍🔍🔍 FORM DEBUG END 🔍🔍🔍");

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API Error (${response.status}): ${errorText}`);
    }

    const result = await response.json();
    console.log("Success:", result);
    success = true;
    
  } catch (error) {
    console.error("Blog creation error:", error);
    errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
  }
  
  // Only redirect if successful
  if (success) {
    return Astro.redirect(`/admin/tables/${tableConfigRecord.route}`);
  } else {
    // Redirect back to form with error message
    return Astro.redirect(`/admin/forms/${tableConfigRecord.route}?error=${encodeURIComponent(errorMessage)}`);
  }
}
---

<AdminLayout title=`SonicJs Admin` | {form} `>
  {errorMessage && (
    <div class="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
      <strong>Error:</strong> {errorMessage}
    </div>
  )}
  <FormComponent form="{form}" title="New">


  </AdminLayout>
