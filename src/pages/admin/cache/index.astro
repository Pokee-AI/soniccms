---
import { getAdminKvData } from "@services/kv-data";
import { apiConfig } from "../../../db/routes";
import AdminLayout from "../layouts/admin-layout.astro";
import TableCacheRequests from "components/table-cache-requests";
import { getFieldDefinitions } from "@services/fields";

const data = await getAdminKvData(Astro);

const tableConfigRecord = apiConfig.find((t) => t.route === 'cache-requests');
const tableConfig = getFieldDefinitions(tableConfigRecord);
---

<AdminLayout title=`SonicJs Admin` | Cache `>
  <h1 class="text-base font-semibold leading-6 text-white">Coming Soon</h1>
  <p class="mt-4">Cache management will be available in a future release.</p>
  <p>
    cache request page, <br />show if data and kv list in sync.
    <br />if not, sync not, show total count records and kv entires.
    <br />show green dot next to record indicating it has associated kv entry.
    <br />show last sync date and time. (sync'd 3 days ago)
    <br />sync now for each record
    <br />really need to know that cached data is not stale regardless of record
    and kv entry
  </p>
  <div>[purge records] | [purge kv] | [resync all]</div>
  <div>
    KV Count: {data.kvRecordsCount}
  </div>
  <div>
    Records Count: {data.cacheRequestsCount}
  </div>
  <div>

    <TableCacheRequests client:load tableConfig={tableConfig} />

    <!-- show table that loops thru data.data -->
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>URL</th>
            <th>Matching KV Record</th>
            <th>Created</th>
            <th>Updated</th>
            <th>Deleted</th>
          </tr>
        </thead>
        <tbody>
          {data.data.map((item) => (
            <tr>
              <td>{item.id}</td>
              <td>{item.url}</td>
              <td>{item.matchingKvRecord}</td>
              <td>{item.createdOn}</td>
              <td>{item.updatedOn}</td>
              <td>{item.deletedOn}</td>
            </tr>
          ))}
        </tbody>
      </table>

     
  </div>
</AdminLayout>
